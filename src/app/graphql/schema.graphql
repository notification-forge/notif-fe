enum AlertType {
  TEAMS
  EMAIL
}

input ApprovalAppInput {
  appCode: String
  status: AppStatus
  rejectedReason: String
}

enum AppStatus {
  ACTIVE
  INACTIVE
  PENDING_OWNER_APPROVAL
  REJECTED
}

input CloneTemplateVersionInput {
  templateId: ID
  id: Int
  name: String
  settings: String
  body: String
}

input CreateAppInput {
  appCode: String
  name: String
  justification: String
  description: String
  primaryOwnerName: String
  primaryOwnerId: String
  secondaryOwnerName: String
  secondaryOwnerId: String
}

input CreateTemplateInput {
  name: String
  alertType: AlertType
  appCode: String
}

input CreateTemplateVersionInput {
  templateId: ID
}

scalar Date

type Image {
  id: ID
  appCode: String
  contentType: String
  tenant: String
  fileName: String
  fileSignature: String
  status: ImageStatus
  imageData: String
}

type ImagePages {
  totalElements: Int
  totalPages: Int
  content: [Image]
  isEmpty: Boolean
  isFirst: Boolean
  isLast: Boolean
  number: Int
  numberOfElements: Int
  size: Int
  sort: Sort
}

enum ImageStatus {
  ACTIVE
  DELETED
}

type Mutation {
  createTemplate(input: CreateTemplateInput!): Template!
  updateTemplate(input: UpdateTemplateInput!): Template!
  createTemplateVersion(input: CreateTemplateVersionInput!): TemplateVersion!
  cloneTemplateVersion(input: CloneTemplateVersionInput!): TemplateVersion!
  updateTemplateVersion(input: UpdateTemplateVersionInput!): TemplateVersion!
  uploadImage(appCode: String, file: Upload!): Image!
  onboardApp(input: CreateAppInput!): Tenant!
  updateApp(input: UpdateAppInput!): Tenant!
  approveOrRejectAppInput(input: ApprovalAppInput!): Tenant!
  onboardUser(input: OnboardingUserInput!): User!
}

type Onboarding {
  id: ID
  username: String
  appCode: String
}

input OnboardingUserInput {
  appCode: String
  username: String
  name: String
}

input PaginationInput {
  pageNumber: Int
  rowPerPage: Int
  sortDirection: SortDirection
  sortField: String
}

type Query {
  template(id: ID): Template
  templatePages(
    name: String
    appCodes: [String]
    paginationInput: PaginationInput
  ): TemplatePages
  templateVersion(id: ID): TemplateVersion
  imagePages(
    name: String
    appCodes: [String]
    paginationInput: PaginationInput
  ): ImagePages
  tenant(id: ID): Tenant
  user(username: ID): User
}

type Sort {
  isSorted: Boolean
  isUnsorted: Boolean
  isEmpty: Boolean
}

enum SortDirection {
  ASC
  DESC
}

type Template {
  id: ID
  name: String
  uuid: String
  alertType: String
  appCode: String
  templateVersions: [TemplateVersion]
  createdDate: Date
  lastModifiedDate: Date
}

type TemplatePages {
  totalElements: Int
  totalPages: Int
  content: [Template]
  isEmpty: Boolean
  isFirst: Boolean
  isLast: Boolean
  number: Int
  numberOfElements: Int
  size: Int
  sort: Sort
}

enum TemplateStatus {
  DRAFT
  PUBLISHED
}

type TemplateVersion {
  templateId: ID
  id: Int
  name: String
  templateHash: String
  body: String
  settings: String
  version: String
  status: TemplateStatus
  createdDate: Date
  lastModifiedDate: Date
}

type Tenant {
  appCode: ID
  displayName: String
  apiToken: String
  status: AppStatus
  justification: String
  description: String
  primaryOwnerName: String
  primaryOwnerId: String
  secondaryOwnerName: String
  secondaryOwnerId: String
  encryptionKey: String
  appSettings: String
  onboardings: [Onboarding]
  approvedBy: String
  approvedDate: Date
  rejectedBy: String
  rejectedDate: Date
  rejectedReason: String
}

input UpdateAppInput {
  appCode: String
  name: String
  justification: String
  description: String
  primaryOwnerName: String
  primaryOwnerId: String
  secondaryOwnerName: String
  secondaryOwnerId: String
}

input UpdateTemplateInput {
  id: ID
  name: String
}

input UpdateTemplateVersionInput {
  id: ID
  name: String
  settings: String
  body: String
  status: TemplateStatus
}

scalar Upload

type User {
  username: ID
  name: String
  onboardings: [Onboarding]
}
